@page "/order"
@using UserFrontend.Frontend.Models.Order.Requests
@using UserFrontend.Frontend.Models.Order.Responses
@using UserFrontend.Frontend.Pages.Order.Menues.Details
@using UserFrontend.Frontend.Services.Contracts
<h3>Menues</h3>
@if (menues is null)
{
    <p>Loading</p>
}
else
{
    <div class="container">
        <div class="row">
            @foreach (var menu in menues)
            {
                <div class="col-3">
                    <MenuDetails Menu="menu" OnMenuSelected=@SetMenu></MenuDetails>
                </div>
            }
        </div>
    </div>
    @if (selectedMenu is not null)
    {
        <div>
            <h4>Selected Menu</h4>
            <p>@selectedMenu.Name</p>
        </div>
        <div>
            <EditForm Model="request" Context="another_name">
                <div>
                    <label>Time</label>
                    <InputDate Type="InputDateType.DateTimeLocal"
                               min="@DateTime.UtcNow.AddDays(2).Date.ToString("yyyy-MM-dd")"
                               @bind-Value=@request.OrderedTo />
                </div>
            </EditForm>
            <button @onclick=PlaceOrder>Place order</button>
        </div>
    }
}

@code {
    private IEnumerable<MenuResponse> menues;
    private MenuResponse selectedMenu;
    private OrderRequest request = new() {OrderedTo = DateTime.UtcNow.AddDays(2)};

    [Inject]
    private IOrderService OrderService { get; set; }


    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        var result = await OrderService.GetMenuesAsync();
        if (result)
            menues = result.Data;
        else
            menues = [];
    }

    private void SetMenu(Guid id)
    {
        selectedMenu = menues.FirstOrDefault(x => x.Id == id)!;
        request.MenuId = id;
    }

    private async Task PlaceOrder()
    {
        if (selectedMenu is null)
            return;
        request.OrderedTo = request.OrderedTo.ToUniversalTime();
        var result = await OrderService.PlaceOrderAsync(request);
        if (result)
        {
            selectedMenu = null!;    
        }
    }
}
